// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  password  String
  roleId    Int
  role      Role    @relation(fields: [roleId], references: [id])
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  permissions Permission[]
  users       User[]
}

model Permission {
  id        Int    @id @default(autoincrement())
  action    String // The action that the permission grants (e.g., "read", "write")
  object    String // The object that the action relates to (e.g., "inventory", "warehouse")
  roles     Role[] 
}

model Categories {
  categoryId String @id
  name       String
  description String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  Products   Products[]
}

model ProductVariants {
  productVariantId String  @id
  productId        String
  sku              String  @unique
  variantName      String?
  attributes       Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  product          Products @relation(fields: [productId], references: [productId])
  Inventory        Inventory[] @relation("InventoryToProductVariants")
}

model Products {
  productId     String       @id
  name          String
  categoryId    String
  description   String?
  unit          String       // e.g., "kg", "ton"
  hasVariants   Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
  category      Categories   @relation(fields: [categoryId], references: [categoryId])
  ProductVariants ProductVariants[]
}


model Inventory {
  inventoryId     String @id
  productVariantId String
  warehouseStock   Int    @default(0)
  shopStock        Int    @default(0)
  lastUpdated      DateTime @default(now())
  productVariant   ProductVariants @relation(fields: [productVariantId], references: [productVariantId])
  ProductVariants  ProductVariants @relation("InventoryToProductVariants")
}

model Sales {
  saleId      String   @id
  customerName String
  customerContact String?
  orderDate   DateTime @default(now())
  dueDate     DateTime
  status      String   @default("Pending")  // Pending, Completed, Cancelled
  totalAmount Float
  paymentStatus String @default("Unpaid") // Unpaid, Paid, Partial
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  SalesOrderLineItems SalesOrderLineItems[]
}

model SalesOrderLineItems {
  id              String  @id
  salesOrderId    String
  productVariantId String
  quantity        Int
  unitPrice       Float
  totalPrice      Float
  salesOrder      Sales @relation(fields: [salesOrderId], references: [saleId])
  productVariant  ProductVariants @relation(fields: [productVariantId], references: [productVariantId])
}

model Purchases {
  purchaseId    String   @id
  supplierName  String
  supplierPhone String
  orderDate     DateTime @default(now())
  expectedDeliveryDate DateTime?
  status        String   @default("Pending")  // Pending, Received, Cancelled
  totalAmount   Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  PurchaseOrderLineItems PurchaseOrderLineItems[]
}

model PurchaseOrderLineItems {
  id                String   @id
  purchaseOrderId   String
  productVariantId  String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  purchaseOrder     Purchases @relation(fields: [purchaseOrderId], references: [purchaseId])
  productVariant    ProductVariants @relation(fields: [productVariantId], references: [productVariantId])
}

model SalesPayments {
  paymentId    String   @id
  salesOrderId String
  paymentDate  DateTime @default(now())
  amountPaid   Float
  paymentMethod String  // Cash, Card, Transfer, etc.
  status       String  // "Completed", "Pending"
  salesOrder   Sales   @relation(fields: [salesOrderId], references: [saleId])
}

model PurchasePayments {
  paymentId    String   @id
  purchaseOrderId String
  paymentDate  DateTime @default(now())
  amountPaid   Float
  paymentMethod String  // Cash, Transfer, etc.
  status       String  // "Completed", "Pending"
  purchaseOrder Purchases @relation(fields: [purchaseOrderId], references: [purchaseId])
}
