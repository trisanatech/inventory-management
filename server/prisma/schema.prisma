// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  userId    String  @id
  name      String
  email     String  @unique
  password  String
  roleId    Int
  role      Roles   @relation(fields: [roleId], references: [id])
  audits    Audits[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Roles {
  id          Int          @id @default(autoincrement())
  name        String
  permissions Permissions[]
  users       Users[]
}

model Permissions {
  id        Int     @id @default(autoincrement())
  action    String  // The action that the permission grants (e.g., "read", "write")
  object    String  // The object or resource the permission applies to (e.g., "inventory")
  roles     Roles[]
}

model Categories {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  products    Products[]
}

model Products {
  productId        String                  @id
  name             String
  description      String?
  price            Float
  imageUrl         String?
  categoryId       Int?
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @default(now()) @updatedAt

  // Relations
  category         Categories?             @relation(fields: [categoryId], references: [id])
  ProductVariants  ProductVariants[]
  StockMovements   StockMovements[]       // Relation for stock movements
}

model ProductVariants {
  productVariantId String                  @id
  productId        String
  sku              String                  @unique
  variantName      String?
  attributes       Json?
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @default(now()) @updatedAt

  // Relations
  product          Products                @relation(fields: [productId], references: [productId])
  Inventory        Inventory[]
  SalesOrderLineItems SalesOrderLineItems[]
  PurchaseOrderLineItems PurchaseOrderLineItems[]
}

model Inventory {
  inventoryId      String          @id
  productVariantId String
  warehouseStock   Int             @default(0)
  shopStock        Int             @default(0)
  lastUpdated      DateTime        @default(now())

  // Relations
  productVariant   ProductVariants @relation(fields: [productVariantId], references: [productVariantId])
  audits           Audits[]        @relation("InventoryAudits")
}

model StockMovements {
  movementId  String    @id
  productId   String
  type        String    // "Sales", "Purchase", or "Adjustment"
  quantity    Int
  timestamp   DateTime  @default(now())

  // Relations
  product     Products  @relation(fields: [productId], references: [productId])
}

model Audits {
  id            Int       @id @default(autoincrement())
  userId        String
  action        String    // e.g., "Stock Adjustment", "Inventory Movement"
  inventoryId   String
  warehouseId   Int
  oldQuantity   Int
  newQuantity   Int
  timestamp     DateTime  @default(now())

  // Relations
  user          Users     @relation(fields: [userId], references: [userId])
  inventory     Inventory @relation("InventoryAudits", fields: [inventoryId], references: [inventoryId])
}

model Sales {
  saleId              String               @id
  customerName        String
  customerContact     String?
  orderDate           DateTime             @default(now())
  dueDate             DateTime
  status              String               @default("Pending")  // Pending, Completed, Cancelled
  totalAmount         Float
  paymentStatus       String               @default("Unpaid")  // Unpaid, Paid, Partial
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt

  // Relations
  SalesOrderLineItems SalesOrderLineItems[]
  SalesPayments       SalesPayments[]
}

model SalesOrderLineItems {
  id              String           @id
  salesOrderId    String
  productVariantId String
  quantity        Int
  unitPrice       Float
  totalPrice      Float

  // Relations
  salesOrder      Sales            @relation(fields: [salesOrderId], references: [saleId])
  productVariant  ProductVariants  @relation(fields: [productVariantId], references: [productVariantId])
}

model Purchases {
  purchaseId            String                   @id
  supplierName          String
  supplierPhone         String
  orderDate             DateTime                 @default(now())
  expectedDeliveryDate  DateTime?
  status                String                   @default("Pending")  // Pending, Received, Cancelled
  totalAmount           Float
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @default(now()) @updatedAt

  // Relations
  PurchaseOrderLineItems PurchaseOrderLineItems[]
  PurchasePayments      PurchasePayments[]
}

model PurchaseOrderLineItems {
  id                String           @id
  purchaseOrderId   String
  productVariantId  String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  
  // Relations
  purchaseOrder     Purchases        @relation(fields: [purchaseOrderId], references: [purchaseId])
  productVariant    ProductVariants  @relation(fields: [productVariantId], references: [productVariantId])
}

model SalesPayments {
  paymentId    String   @id
  salesOrderId String
  paymentDate  DateTime @default(now())
  amountPaid   Float
  paymentMethod String  // Cash, Card, Transfer, etc.
  status       String   // "Completed", "Pending"

  // Relations
  salesOrder   Sales    @relation(fields: [salesOrderId], references: [saleId])
}

model PurchasePayments {
  paymentId       String   @id
  purchaseOrderId String
  paymentDate     DateTime @default(now())
  amountPaid      Float
  paymentMethod   String  // Cash, Transfer, etc.
  status          String  // "Completed", "Pending"

  // Relations
  purchaseOrder   Purchases @relation(fields: [purchaseOrderId], references: [purchaseId])
}
