// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  userId String @id
  name   String
  email  String
  password String
}

model Products {
  productId     String      @id
  name          String
  price         Float
  rating        Float?
  stockQuantity Int
  Sales         Sales[]
  Purchases     Purchases[]
}

model Sales {
  saleId      String   @id
  productId   String
  timestamp   DateTime
  quantity    Int
  unitPrice   Float
  totalAmount Float
  product     Products @relation(fields: [productId], references: [productId])
}

model Purchases {
  purchaseId String   @id
  productId  String
  timestamp  DateTime
  quantity   Int
  unitCost   Float
  totalCost  Float
  product    Products @relation(fields: [productId], references: [productId])
}

model Expenses {
  expenseId String   @id
  category  String
  amount    Float
  timestamp DateTime
}

model SalesSummary {
  salesSummaryId   String   @id
  totalValue       Float
  changePercentage Float?
  date             DateTime
}

model PurchaseSummary {
  purchaseSummaryId String   @id
  totalPurchased    Float
  changePercentage  Float?
  date              DateTime
}

model ExpenseSummary {
  expenseSummaryId  String              @id
  totalExpenses     Float
  date              DateTime
  ExpenseByCategory ExpenseByCategory[]
}

model ExpenseByCategory {
  expenseByCategoryId String         @id
  expenseSummaryId    String
  category            String
  amount              BigInt
  date                DateTime
  expenseSummary      ExpenseSummary @relation(fields: [expenseSummaryId], references: [expenseSummaryId])
}


// model User {
//   id        Int     @id @default(autoincrement())
//   email     String  @unique
//   password  String
//   roleId    Int
//   role      Role    @relation(fields: [roleId], references: [id])
// }

// model Role {
//   id          Int          @id @default(autoincrement())
//   name        String
//   permissions Permission[]
//   users       User[]
// }

// model Permission {
//   id        Int    @id @default(autoincrement())
//   action    String // The action that the permission grants (e.g., "read", "write")
//   object    String // The object that the action relates to (e.g., "inventory", "warehouse")
//   roles     Role[] 
// }

// model Products {
//   productId         String   @id
//   name              String
//   category          String
//   price             Float
//   rating            Float?
//   stockQuantity     Int
//   lowStockThreshold Int?     // Optional threshold for low stock alerts
//   Sales             Sales[]
//   Purchases         Purchases[]
// }

// model Sales {
//   saleId        String   @id
//   productId     String
//   customerId    String?
//   timestamp     DateTime
//   quantity      Int
//   unitPrice     Float
//   totalAmount   Float
//   paymentStatus String   // "Paid" , "Credit" , and "Partial"
//   product       Products @relation(fields: [productId], references: [productId])
//   customer      Users?   @relation(fields: [customerId], references: [userId])
// }

// model Purchases {
//   purchaseId    String   @id
//   productId     String
//   vendorId      String?
//   timestamp     DateTime
//   quantity      Int
//   unitCost      Float
//   totalCost     Float
//   paymentStatus String   // "Paid" , "Credit", and "Partial"
//   product       Products @relation(fields: [productId], references: [productId])
//   vendor        Users?   @relation(fields: [vendorId], references: [userId])
// }

// model CreditTransactions {
//   transactionId String   @id
//   userId        String   // Customer (for sales) or Vendor (for purchases)
//   type          String   // "Sales" or "Purchases"
//   totalAmount   Float
//   paidAmount    Float
//   remainingAmount Float
//   dueDate       DateTime?
//   user          Users    @relation(fields: [userId], references: [userId])
// }

// model StockMovements {
//   movementId  String   @id
//   productId   String
//   type        String   // "Sales", "Purchase", or "Adjustment"
//   quantity    Int
//   timestamp   DateTime
//   product     Products @relation(fields: [productId], references: [productId])
// }

// model DailyReports {
//   reportId       String   @id
//   date           DateTime
//   totalSales     Float
//   totalPurchases Float
//   stockUpdates   Int
// }

// product price is not certain

// model Warehouse {
//   id            Int       @id @default(autoincrement())
//   name          String
//   location      String
//   inventoryManagers   User[] @relation("WarehouseInventoryManagers")
//   receivingManagers   User[] @relation("WarehouseReceivingManagers")
//   shippingManagers    User[] @relation("WarehouseShippingManagers")
//   inventories   Inventory[]
// }

// model Audit {
//   id            Int       @id @default(autoincrement())
//   userId        Int
//   action        String    // e.g., "Stock Adjustment", "Inventory Movement"
//   inventoryId   Int
//   warehouseId   Int
//   oldQuantity   Int
//   newQuantity   Int
//   timestamp     DateTime  @default(now())
//   user          User      @relation(fields: [userId], references: [id])
// }
