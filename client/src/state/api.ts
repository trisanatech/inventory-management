import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

// interfaces for the models
export interface Category {
  id: number;
  name: string;
  description?: string;
  createdAt: string;
  updatedAt: string;
}

export interface Product {
  productId: string;
  name: string;
  description?: string;
  price: number;
  imageUrl?: string;
  categoryId?: number;
  createdAt: string;
  updatedAt: string;
  category?: Category; 
  ProductVariants?: ProductVariant[]; 
}

export interface ProductVariant {
  productVariantId: string;
  productId: string;
  sku: string;
  variantName?: string;
  attributes?: Record<string, any>;
  createdAt: string;
  updatedAt: string;
  product?: Product; 
}

export interface DashboardMetrics {
  popularProducts: Product[];
  // salesSummary: SalesSummary[];
  // purchaseSummary: PurchaseSummary[];
  // expenseSummary: ExpenseSummary[];
  // expenseByCategorySummary: ExpenseByCategorySummary[];
}

export interface User {
  userId: string;
  name: string;
  email: string;
}

// Create API
export const api = createApi({
  baseQuery: fetchBaseQuery({ baseUrl:  process.env.NEXT_PUBLIC_API_BASE_URL }),
  reducerPath: "api", 
  tagTypes: ["DashboardMetrics","Products","ProductVariants", "Users"], 
  endpoints: (builder) => ({

    getDashboardMetrics: builder.query<DashboardMetrics, void>({
          query: () => "/dashboard",
          providesTags: ["DashboardMetrics"],
        }),
    
    getCategories: builder.query<Category[], void>({
      query: () => "/categories",
    }),
    getCategoryById: builder.query<Category, number>({
      query: (id) => `/categories/${id}`,
    }),

    
    getProducts: builder.query<Product[], string | void>({
      query: (search) => ({
        url: "/products",
        params: search ? { search } : {}, 
      }),
      providesTags: ["Products"], // Enable caching and invalidation
    }),
    getProductById: builder.query<Product, string>({
      query: (productId) => `/products/${productId}`,
    }),

    createProduct: builder.mutation<Product, Partial<Product>>({
      query: (newProduct) => ({
        url: "/products",
        method: "POST",
        body: newProduct,
      }),
      invalidatesTags: ["Products"], // Invalidate cache after creation
    }),

    
    getProductVariants: builder.query<ProductVariant[], string | void>({
      query: (search) => ({
        url: "/product-variants",
        params: search ? { search } : {}, 
      }),
      providesTags: ["ProductVariants"], // Enable caching for variants
    }),
    getProductVariantById: builder.query<ProductVariant, string>({
      query: (productVariantId) => `/product-variants/${productVariantId}`,
    }),
    createProductVariant: builder.mutation<ProductVariant, Partial<ProductVariant>>({
      query: (newVariant) => ({
        url: "/product-variants",
        method: "POST",
        body: newVariant,
      }),
      invalidatesTags: ["ProductVariants"], // Invalidate cache after creation
    }),



 getUsers: builder.query<User[], void>({
      query: () => "/users",
      providesTags: ["Users"],
    }),

    login: builder.mutation<
      { token: string },
      { email: string; password: string }
    >({
      query: ({ email, password }: { email: String; password: string }) => ({
        url: "/login",
        method: "POST",
        body: { email, password },
      }),
      invalidatesTags: ["Users"],
    }),
    signup: builder.mutation<
      { token: string },
      { name: string; email: string; password: string }
    >({
      query: ({
        name,
        email,
        password,
      }: {
        name: string;
        email: string;
        password: string;
      }) => ({
        url: "/signup",
        method: "POST",
        body: { name, email, password },
      }),
      invalidatesTags: ["Users"],
    }),

  }),
});

// Export hooks generated by the API
export const {
  useGetDashboardMetricsQuery,
  
  useGetCategoriesQuery,
  useGetCategoryByIdQuery,
  useGetProductsQuery,
  useGetProductByIdQuery,
  useCreateProductMutation,
  useGetProductVariantsQuery,
  useGetProductVariantByIdQuery,
  useCreateProductVariantMutation,

  useGetUsersQuery,
  useLoginMutation,
  useSignupMutation,
} = api;
